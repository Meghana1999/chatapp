{"ast":null,"code":"var _jsxFileName = \"/Users/meghana/Desktop/chatapp 2/frontend/src/Components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:4000', {\n  transports: ['websocket']\n});\nconst Chat = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [usernameSubmitted, setUsernameSubmitted] = useState(false);\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState({});\n  useEffect(() => {\n    socket.on('activeUsers', users => {\n      setActiveUsers(users.filter(user => user !== username));\n    });\n    socket.on('message', data => {\n      setMessages(prevMessages => {\n        return {\n          ...prevMessages,\n          [data.sender]: [...(prevMessages[data.sender] || []), data.message]\n        };\n      });\n    });\n    return () => {\n      socket.off('activeUsers');\n      socket.off('message');\n    };\n  }, [username]);\n  const handleUsernameSubmit = () => {\n    if (username.trim() !== '') {\n      socket.emit('join', username);\n      setUsernameSubmitted(true);\n    }\n  };\n  const sendMessage = () => {\n    if (selectedUser && message) {\n      socket.emit('message', {\n        recipient: selectedUser,\n        message\n      });\n      setMessage('');\n      setMessages(prevMessages => {\n        return {\n          ...prevMessages,\n          [selectedUser]: [...(prevMessages[selectedUser] || []), message]\n        };\n      });\n    }\n  };\n  const selectUser = user => {\n    setSelectedUser(user);\n  };\n  if (!usernameSubmitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUsernameSubmit,\n        children: \"Set Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n  //   return (\n  //     <div>\n  //       <h2>Welcome, {username}!</h2>\n  //       <h3>Active Users:</h3>\n  //       <ul>\n  //         {activeUsers.map((user) => (\n  //           <li key={user} onClick={() => selectUser(user)} style={{ cursor: 'pointer' }}>\n  //             {user}\n  //           </li>\n  //         ))}\n  //       </ul>\n  //       {selectedUser && (\n  //         <div>\n  //           <h3>Chat with {selectedUser}</h3>\n  //           <input\n  //             type=\"text\"\n  //             placeholder=\"Enter your message\"\n  //             value={message}\n  //             onChange={(e) => setMessage(e.target.value)}\n  //           />\n  //           <button onClick={sendMessage}>Send</button>\n  //           <ul>\n  //             {messages[selectedUser] &&\n  //               messages[selectedUser].map((msg, index) => (\n  //                 <li key={index}>\n  //                   <strong>{selectedUser}:</strong> {msg}\n  //                 </li>\n  //               ))}\n  //           </ul>\n  //         </div>\n  //       )}\n  //     </div>\n  //   );\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatUsers\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Active Users:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"ActiveUsers\",\n        children: activeUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => selectUser(user),\n          children: user\n        }, user, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatChat\",\n      children: selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Chat with \", selectedUser]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"ChatWindow\",\n          children: messages[selectedUser] && messages[selectedUser].map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: msg\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChatInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter your message\",\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 3\n  }, this);\n};\n_s(Chat, \"HBuiTK/7V4YuciGablE6zrnEqys=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","transports","Chat","_s","username","setUsername","usernameSubmitted","setUsernameSubmitted","activeUsers","setActiveUsers","selectedUser","setSelectedUser","message","setMessage","messages","setMessages","on","users","filter","user","data","prevMessages","sender","off","handleUsernameSubmit","trim","emit","sendMessage","recipient","selectUser","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","map","msg","index","_c","$RefreshReg$"],"sources":["/Users/meghana/Desktop/chatapp 2/frontend/src/Components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:4000', {\r\n  transports: ['websocket'],\r\n});\r\n\r\nconst Chat = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [usernameSubmitted, setUsernameSubmitted] = useState(false);\r\n  const [activeUsers, setActiveUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState({});\r\n\r\n  useEffect(() => {\r\n    socket.on('activeUsers', (users) => {\r\n      setActiveUsers(users.filter((user) => user !== username));\r\n    });\r\n    socket.on('message', (data) => {\r\n      setMessages((prevMessages) => {\r\n        return {\r\n          ...prevMessages,\r\n          [data.sender]: [...(prevMessages[data.sender] || []), data.message],\r\n        };\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      socket.off('activeUsers');\r\n      socket.off('message');\r\n    };\r\n  }, [username]);\r\n\r\n  const handleUsernameSubmit = () => {\r\n    if (username.trim() !== '') {\r\n      socket.emit('join', username);\r\n      setUsernameSubmitted(true);\r\n    }\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    if (selectedUser && message) {\r\n      socket.emit('message', { recipient: selectedUser, message });\r\n      setMessage('');\r\n      setMessages((prevMessages) => {\r\n        return {\r\n          ...prevMessages,\r\n          [selectedUser]: [...(prevMessages[selectedUser] || []), message],\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  const selectUser = (user) => {\r\n    setSelectedUser(user);\r\n  };\r\n\r\n  if (!usernameSubmitted) {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter your username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <button onClick={handleUsernameSubmit}>Set Username</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Welcome, {username}!</h2>\r\n//       <h3>Active Users:</h3>\r\n//       <ul>\r\n//         {activeUsers.map((user) => (\r\n//           <li key={user} onClick={() => selectUser(user)} style={{ cursor: 'pointer' }}>\r\n//             {user}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       {selectedUser && (\r\n//         <div>\r\n//           <h3>Chat with {selectedUser}</h3>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Enter your message\"\r\n//             value={message}\r\n//             onChange={(e) => setMessage(e.target.value)}\r\n//           />\r\n//           <button onClick={sendMessage}>Send</button>\r\n//           <ul>\r\n//             {messages[selectedUser] &&\r\n//               messages[selectedUser].map((msg, index) => (\r\n//                 <li key={index}>\r\n//                   <strong>{selectedUser}:</strong> {msg}\r\n//                 </li>\r\n//               ))}\r\n//           </ul>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n\r\nreturn (\r\n  <div className=\"Chat\">\r\n    <div className=\"ChatUsers\">\r\n      <h3>Active Users:</h3>\r\n      <ul className=\"ActiveUsers\">\r\n        {activeUsers.map((user) => (\r\n          <li key={user} onClick={() => selectUser(user)}>\r\n            {user}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n    <div className=\"ChatChat\">\r\n      {selectedUser && (\r\n        <div>\r\n          <h3>Chat with {selectedUser}</h3>\r\n          <ul className=\"ChatWindow\">\r\n            {messages[selectedUser] &&\r\n              messages[selectedUser].map((msg, index) => (\r\n                <li key={index}>\r\n                  {msg}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n          <div className=\"ChatInput\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter your message\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n            />\r\n            <button onClick={sendMessage}>Send</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n};\r\n\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}